volumes:
  db-data:
  minio-data:
  files:

networks:
  school:

services:
  minio:
    container_name: minio
    image: minio/minio:latest
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - '9000:9000' # API port
      - '9001:9001' # Console port
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'mc', 'ready', 'local']
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - school

  db:
    container_name: db
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - ${DB_PORT}:5432
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: 'pg_isready -U ${DB_USER} -d ${DB_NAME}'
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - school
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1'
    #       memory: 4G

  app:
    container_name: app
    depends_on:
      db:
        condition: service_healthy
        restart: true
      minio:
        condition: service_healthy
        restart: true
    environment:
      DATABASE_URL: 'postgresql://${DB_USER}:${DB_PASSWORD}@db:${DB_PORT}/${DB_NAME}?schema=public'
      API_SECRET: ${API_SECRET}
      BASE_URL: ${BASE_URL}
      NODEMAILER_FROM: ${NODEMAILER_FROM}
      NODEMAILER_HOST: ${NODEMAILER_HOST}
      NODEMAILER_PORT: ${NODEMAILER_PORT}
      NODEMAILER_SECURE: ${NODEMAILER_SECURE}
      NODEMAILER_AUTH_USER: ${NODEMAILER_AUTH_USER}
      NODEMAILER_AUTH_PASS: ${NODEMAILER_AUTH_PASS}
      # MinIO configuration
      S3_ENDPOINT: 'http://minio:9000'
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      S3_BUCKET: ${S3_BUCKET:-uploads}
      S3_REGION: ${S3_REGION:-us-east-1}
    build: .
    restart: always
    ports:
      - '80:3000'
      - '443:3000'
    volumes:
      - files:/src/files
    networks:
      - school
